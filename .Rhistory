usethis::use_readme_rmd()
usethis::use_package("reticulate")
dir.create("inst") file.copy("~/pyagcounts/agcounts/extract.py", "inst/extract.py")
dir.create("inst") file.copy("~/pyagcounts/agcounts/extract.py", "inst/extract.py")
dir.create("inst"); file.copy("~/pyagcounts/agcounts/extract.py", "inst/extract.py")
?reticulate::py_function_wrapper()
reticulate::py_run_file("inst/extract.py")
n
reticulate::py_config()
reticulate::py_run_file("inst/extract.py")
reticulate::py_run_file("inst/extract.py")
res = .Last.value
reticulate::py_module_available("numpy")
x <- reticulate::import("numpy")
x$version$full_version
module_version = function(module) {
x <- reticulate::import("numpy")
x$version$full_version
}
stop_module_version("numpy", "1.20.0")
module_version = function(module = "numpy") {
x <- reticulate::import(module)
x$version$full_version
}
check_module_version = function(module, version) {
ver = module_version(module)
ver = as.package_version(ver)
ver >= as.package_version(version)
}
stop_module_version = function(module, version) {
res = check_module_version(module, version)
if (!res) {
stop(module, " does not have version >= ", version)
}
}
stop_module_version("numpy", "1.20.0")
module_version("scipy")
source("~/agcounts/R/aaa.R")
f = get_ag_functions()
py_get_counts = f$get_counts
py_get_counts()
py_get_counts
remotes::install_github("muschellij2/SummarizedActigraphy")
devtools::load_all(".")
devtools::load_all(".")
x = readr::read_csv("~/nhanes_80hz/csv/pax_g/62171.csv.gz")
df = x; rm(x)
dim(df)
get_sample_rate(df)
dim(df)
df
x
df = readr::read_csv("~/nhanes_80hz/csv/pax_g/62171.csv.gz")
head(df)
rm(df)
gc()
df = readr::read_csv("~/nhanes_80hz/csv/pax_g/62171.csv.gz", n_max = 100)
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 100)
head(df)
df = readr::read_csv("~/nhanes_80hz/csv/pax_g/62171.csv.gz", n_max = 300000)
sample_rate = NULL
sample_rate = get_sample_rate(df, sample_rate)
get_sample_rate = function(df, sample_rate = NULL) {
if (!is.null(sample_rate)) {
return(sample_rate)
}
if (is.null(sample_rate) || is.na(sample_rate)) {
sample_rate = attr(df, "sample_rate")
}
if ((is.null(sample_rate) || is.na(sample_rate)) &&
any(c("time", "HEADER_TIME_STAMP") %in% colnames(df))) {
warning("Guessing sample_rate from the data")
time = df[["time"]]
if (is.null(time)) {
time = df[["HEADER_TIME_STAMP"]]
}
time = diff(time)
units(time) = "secs"
if (all(time > 1)) {
# minute level data
sample_rate = unique(1 / as.numeric(time))
} else {
sample_rate = unique(round(1 / as.numeric(time)))
}
stopifnot(length(sample_rate) == 1)
}
stopifnot(!is.null(sample_rate))
return(sample_rate)
}
sample_rate = get_sample_rate(df, sample_rate)
devtools::load_all(".")
df = readr::read_csv("~/nhanes_80hz/csv/pax_g/62171.csv.gz", n_max = 300000)
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
debugonce(get_sample_rate(df))
debugonce(get_sample_rate)
debugonce(get_sample_rate(df))
sample_rate
(is.null(sample_rate) || is.na(sample_rate)
)
colnames(df)
devtools::load_all(".")
debugonce(get_sample_rate(df))
df
get_sample_rate(df)
debugonce(get_sample_rate)
get_sample_rate(df)
time
time
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
devtools::load_all(".")
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
df = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
head(df)
get_sample_rate(df)
debugonce(get_sample_rate)
get_sample_rate(df)
time
sample_rate
head(df)
options(digits.secs = 3)
head(df)
1/0.013
1/80
diff(head(df$HEADER_TIMESTAMP))
head(df$HEADER_TIMESTAMP)
as.numeric(head(df$HEADER_TIMESTAMP))
as.numeric(head(df$HEADER_TIMESTAMP)) %% 1
diff(as.numeric(head(df$HEADER_TIMESTAMP)) %% 1)
sample_rate = 80
sample_rate = get_sample_rate(df, sample_rate)
f = get_ag_functions()
py_get_counts = f$get_counts
sample_rate = as.integer(sample_rate)
accepted_frequencies = c(30, 40, 50, 60, 70, 80, 90, 100)
if (sample_rate %in% accepted_frequencies) {
warning("sample_rate does not seem to be in the accepted sample_rates!")
}
sample_rate
sample_rate %in% accepted_frequencies
if (!sample_rate %in% accepted_frequencies) {
warning("sample_rate does not seem to be in the accepted sample_rates!")
}
if (!is.wholenumber(epoch_in_seconds)) {
stop("epoch in seconds is not a whole number!")
}
epoch_in_seconds = 1L
epoch_in_seconds = as.integer(epoch_in_seconds)
xyz = c("X", "Y", "Z")
cn = colnames(df)
if (all(tolower(xyz) %in% cn) && !all(xyz %in% cn)) {
xyz = tolower(xyz)
}
df = df[,xyz, drop = FALSE]
dim(df)
df = as.matrix(df)
result = py_ag_counts(raw = df,
epoch = epoch_in_seconds,
freq = sample_rate)
result = py_get_counts(raw = df,
epoch = epoch_in_seconds,
freq = sample_rate)
dim(result)
head(result)
result = py_get_counts(raw = df,
epoch = epoch_in_seconds,
freq = sample_rate, fast = FALSE)
result
activityCounts::counts
SummarizedActigraphy::summarise_actigraphy
SummarizedActigraphy::summarise_daily_actigraphy
SummarizedActigraphy::calculate_measures()
SummarizedActigraphy::calculate_measures
SummarizedActigraphy::calculate_ac
head(result)
head(df)
names(result) = c("x", "y", "z")
result = as.data.frame(result)
dim(result)
tail(df)
xdf = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
dim(xdf)
dim(xdf)/80
df = xdf
get_time = function(df) {
stopifnot(
any(c("time", "HEADER_TIME_STAMP", "HEADER_TIMESTAMP")
%in% colnames(df))
)
time = df[["time"]]
if (is.null(time)) {
time = df[["HEADER_TIME_STAMP"]]
}
if (is.null(time)) {
time = df[["HEADER_TIMESTAMP"]]
}
time
}
get_sample_rate = function(df, sample_rate = NULL) {
if (!is.null(sample_rate)) {
return(sample_rate)
}
if (is.null(sample_rate) || is.na(sample_rate)) {
sample_rate = attr(df, "sample_rate")
}
if ((is.null(sample_rate) || is.na(sample_rate)) &&
any(c("time", "HEADER_TIME_STAMP", "HEADER_TIMESTAMP")
%in% colnames(df))) {
warning("Guessing sample_rate from the data")
time = get_time(df)
time = diff(time)
units(time) = "secs"
if (all(time > 1)) {
# minute level data
sample_rate = unique(1 / as.numeric(time))
} else {
sample_rate = unique(round(1 / as.numeric(time)))
}
stopifnot(length(sample_rate) == 1)
}
stopifnot(!is.null(sample_rate))
return(sample_rate)
}
is.wholenumber <-
function(x, tol = .Machine$double.eps^0.5)  abs(x - round(x)) < tol
rms = function(x, y, z) {
AC = sqrt(x^2 + y^2 + z^2)
}
epoch_in_seconds = 1L
sample_rate
sample_rate = get_sample_rate(df, sample_rate)
f = get_ag_functions()
py_get_counts = f$get_counts
sample_rate = as.integer(sample_rate)
accepted_frequencies = c(30, 40, 50, 60, 70, 80, 90, 100)
if (!sample_rate %in% accepted_frequencies) {
warning("sample_rate does not seem to be in the accepted sample_rates!")
}
if (!is.wholenumber(epoch_in_seconds)) {
stop("epoch in seconds is not a whole number!")
}
epoch_in_seconds = as.integer(epoch_in_seconds)
time = get_time(df)
xyz = c("X", "Y", "Z")
cn = colnames(df)
if (all(tolower(xyz) %in% cn) && !all(xyz %in% cn)) {
xyz = tolower(xyz)
}
df = df[,xyz, drop = FALSE]
df = as.matrix(df)
result = py_get_counts(raw = df,
epoch = epoch_in_seconds,
freq = sample_rate)
names(result) = c("x", "y", "z")
result = as.data.frame(result)
time = unique(lubridate::floor_date(
time,
unit = paste0(epoch_in_seconds, " seconds")))
stopifnot(length(time) == nrow(result))
devtools::load_all(".")
rm(list=ls())
devtools::load_all(".")
out = get_counts(xdf, sample_rate = 80)
xdf = readr::read_csv("~/nhanes_80hz/pax_g/csv/62171.csv.gz", n_max = 300000)
out = get_counts(xdf, sample_rate = 80)
library(dplyr)
usethis::use_pipe()
out = get_counts(xdf, sample_rate = 80)
debugonce(get_counts)
out = get_counts(xdf, sample_rate = 80)
result
head(result)
result
timecol
head(result)
devtools::load_all(".")
devtools::load_all(".")
out = get_counts(xdf, sample_rate = 80)
out
hea(out)
head(out)
head(out)$HEADER_TIMESTAMP
head(out)$HEADER_TIMESTAMP %% 1
as.numeric(head(out)$HEADER_TIMESTAMP) %% 1
library(agcounts)
library(agcounts)
library(agcounts)
library(agcounts)
