% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/download_test_data.R, R/get_counts.R
\name{download_actgraph_test_data}
\alias{download_actgraph_test_data}
\alias{get_counts_py}
\alias{extract_counts_csv}
\alias{get_counts_csv}
\alias{convert_counts_csv}
\alias{get_counts}
\alias{extract_counts}
\alias{resample_data}
\alias{filter_data}
\alias{trim_data}
\alias{resample_10hz}
\alias{sum_counts}
\title{Get Actigraph Counts}
\usage{
download_actgraph_test_data()

get_counts_py(
  df,
  epoch_in_seconds = 1L,
  sample_rate = NULL,
  fast = TRUE,
  save_memory = FALSE,
  verbose = TRUE
)

extract_counts_csv(
  file,
  sample_rate,
  epoch_in_seconds = 1L,
  fast = TRUE,
  verbose = TRUE
)

get_counts_csv(
  file,
  sample_rate = NULL,
  epoch_in_seconds = 60L,
  fast = TRUE,
  verbose = TRUE,
  ...
)

convert_counts_csv(
  file,
  outfile,
  sample_rate = NULL,
  epoch_in_seconds = 60L,
  fast = TRUE,
  verbose = TRUE,
  time_column = NULL,
  ...
)

get_counts(
  df,
  epoch_in_seconds = 1L,
  sample_rate = NULL,
  save_memory = FALSE,
  verbose = TRUE
)

extract_counts(raw, epoch_in_seconds = 1L, sample_rate = NULL, verbose = TRUE)

resample_data(df, sample_rate = NULL, verbose = TRUE)

filter_data(df, verbose = TRUE)

trim_data(df, verbose = TRUE)

resample_10hz(df, verbose = TRUE)

sum_counts(df, epoch_in_seconds = 1L, verbose = TRUE)
}
\arguments{
\item{df}{A \code{data.frame} with columns \code{X}, \code{Y}, \code{Z}, and
a time column either \code{time}, \code{HEADER_TIME_STAMP}, or \code{HEADER_TIMESTAMP}}

\item{epoch_in_seconds}{epoch to calculate the counts for, in seconds}

\item{sample_rate}{The sampling rate for the data.  If \code{NULL}, then
it will try to be guessed from \code{df}}

\item{fast}{Should the fast implementation be used?  You may want to set
this as \code{FALSE} if your data is \emph{very} big}

\item{save_memory}{Should each column be run separately?}

\item{verbose}{print diagnostic messages}

\item{file}{name of CSV file to run, must have columns \code{X}, \code{Y}, \code{Z}}

\item{...}{additional arguments to pass to \link[readr:read_delim]{readr::read_csv}}

\item{outfile}{output filename for csv}

\item{time_column}{Column which has time in there.  If \code{NULL}, then
will be guessed from the data.  If no time column exists, use
\link{get_counts_csv}}

\item{raw}{a raw matrix of numeric values}
}
\value{
A \code{data.frame} of each axis count and the vector magntitude of them
in the \code{AGCOUNT} column with a time column
}
\description{
Get Actigraph Counts
}
\examples{
x = download_actgraph_test_data()
epoch = 10
sample_rate = 30
search_string = paste0("raw_", epoch, "_", sample_rate)
testfile = x$ActiLifeCounts
testfile = testfile[grepl(search_string, testfile)]
file = x$raw
file = file[grepl(search_string, file)]
if (requireNamespace("readr", quietly = TRUE)) {
   df = readr::read_csv(file, col_names = FALSE)
   colnames(df) = c("Y", "X", "Z")
   df = df[, c("X", "Y", "Z")]
   # title_epoch_frequency
   out_mem = get_counts(df, sample_rate = sample_rate,
   save_memory = TRUE, epoch = epoch, verbose = 2)

   out = get_counts(df, sample_rate = sample_rate, epoch = epoch, verbose = 2)
   out$AGCOUNT = NULL
   check = readr::read_csv(testfile, skip = 10)
   stopifnot(all(check == out))
   stopifnot(all(check == out_mem))

   out_extract = extract_counts(as.matrix(df), sample_rate = sample_rate,
   epoch = epoch)
   stopifnot(all(check == out_extract))
   tfile = tempfile(fileext = ".csv.gz")
   readr::write_csv(df, tfile)
   out_extract_csv = extract_counts_csv(tfile, sample_rate = sample_rate,
   epoch = epoch)
   stopifnot(all(check == out_extract_csv[, c("X", "Y", "Z")]))
}
}
